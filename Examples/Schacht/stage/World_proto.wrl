#VRML V2.0 utf8

PROTO World [
  exposedField  SFBool    enabled		TRUE
  exposedField  SFTime    startTime		0
  exposedField  SFTime    stopTime		0
  eventOut      SFBool    isActive		
  eventOut      SFTime    enterTime		
  eventOut      SFTime    exitTime		
  exposedField  MFNode    scene		[ ]
  exposedField  MFNode    children		[ ]
]
{
  PROTO Data [
    exposedField  SFBool    enabled		TRUE
    exposedField  SFTime    startTime		0
    exposedField  SFTime    stopTime		0
    exposedField  MFNode    scene		[ ]
    exposedField  MFNode    children		[ ]
  ]
  {
    Group { 
      children IS children
    }
  }

  DEF Data Data { 
    enabled IS enabled
    startTime IS startTime
    stopTime IS stopTime
    scene IS scene
    children IS children
  }

  DEF _world Script { 
    eventOut  SFBool    isActive IS isActive
    eventOut  SFTime    enterTime IS enterTime
    eventOut  SFTime    exitTime IS exitTime
    eventIn   SFTime    set_startTime
    eventIn   SFTime    set_stopTime
    eventIn   SFTime    set_startTimeC
    eventIn   SFTime    set_stopTimeC
    eventIn   MFNode    set_scene
    field     SFNode    self USE _world
    field     SFNode    scene NULL
    field     SFNode    data USE Data
    url "vrmlscript:
function set_startTime(value, time)
{
	if (!data.enabled) return;
	if (!scene) return;
	if (!isActive) {
		scene.set_startTime = time;
	}
}

function set_stopTime(value, time)
{
	if (!data.enabled) return;
	if (!scene) return;
	if (isActive) {
		scene.set_stopTime = time;
	}
}

function set_startTimeC(value, time)
{
	if (!data.enabled) return;
	if (!isActive) {
		isActive = TRUE;
		enterTime = time;
	}
}

function set_stopTimeC(value, time)
{
	if (!data.enabled) return;
	if (isActive) {
		exitTime = time;
		isActive = FALSE;
	}
}

function set_scene(value, time)
{
	found = FALSE;
	for (i = 0; i < value.length && !found; i++) {
		if (value[i] == 'Transform { }' && value[i].children.length && value[i].children[0] == 'Scene { }') {
			found = TRUE;
			scene = value[i].children[0];
		} else if (value[i] == 'Scene { }') {
			found = TRUE;
			scene = value[i];
		} 
	}
	if (!found) return;
	Browser.addRoute(scene, 'enterTime', self, 'set_startTimeC');
	Browser.addRoute(scene, 'exitTime', self, 'set_stopTimeC');
	for (i = 0; i < data.children.length; i++) {
		Browser.addRoute(data.children[i],  'value_changed', scene.children[i], 'set_value');
		Browser.addRoute(scene.children[i], 'value_changed', data.children[i], 'set_value');
	}
}

function initialize()
{
	if (data.scene.length) {
		set_scene(data.scene, 0);
		if (data.startTime) data.startTime = 1;
	}
}
"
    directOutput TRUE
  }

  ROUTE Data.startTime_changed TO _world.set_startTime
  ROUTE Data.stopTime_changed TO _world.set_stopTime
  ROUTE Data.scene_changed TO _world.set_scene
}

